name: CI

on:
  push:
    branches:
      - master
    tags:
      - 'v.*'
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        rust_channel:
          - stable
        rust_target_triple:
          # https://internals.rust-lang.org/t/demote-windows-mingw-targets-to-lower-tiers-or-re-enable-their-tests/10536
          - x86_64-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - i686-pc-windows-msvc
          - i686-pc-windows-gnu
          - i686-apple-darwin
          - i686-unknown-linux-gnu
        include:
          - rust_channel: stable
            rust_target_triple: x86_64-pc-windows-msvc
            rust_host_triple: x86_64-pc-windows-msvc
            os: windows-2019
          - rust_channel: stable
            rust_target_triple: x86_64-pc-windows-gnu
            rust_host_triple: x86_64-pc-windows-msvc
            os: windows-2019
          - rust_channel: stable
            rust_target_triple: x86_64-apple-darwin
            rust_host_triple: x86_64-apple-darwin
            os: macOS-10.14
          - rust_channel: stable
            rust_target_triple: x86_64-unknown-linux-gnu
            rust_host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04
          - rust_channel: stable
            rust_target_triple: i686-pc-windows-msvc
            rust_host_triple: x86_64-pc-windows-msvc
            os: windows-2019
          - rust_channel: stable
            rust_target_triple: i686-pc-windows-gnu
            rust_host_triple: x86_64-pc-windows-msvc
            os: windows-2019
          - rust_channel: stable
            rust_target_triple: i686-apple-darwin
            rust_host_triple: x86_64-apple-darwin
            os: macOS-10.14
          - rust_channel: stable
            rust_target_triple: i686-unknown-linux-gnu
            rust_host_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04

    name: ${{ matrix.rust_channel }}-${{ matrix.rust_target_triple }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v1

      - name: apt-get install
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install libssl-dev:i386 # gcc-multilib
        if: matrix.rust_target_triple == 'i686-unknown-linux-gnu'

      - name: rustup-init
        run: |
          curl -sSf --tlsv1.2 --proto '=https' -o ./rustup-init https://sh.rustup.rs
          bash ./rustup-init -y --no-modify-path --default-host ${{ matrix.rust_host_triple }} --default-toolchain ${{ matrix.rust_channel }}
          echo 'export PATH="$HOME/.cargo/bin:$HOME/go/bin:$PATH"' > /tmp/rc.bash
          if ${{ matrix.rust_target_triple != matrix.rust_host_triple }}; then
            echo 'export PKG_CONFIG_ALLOW_CROSS=1' >> /tmp/rc.bash
            echo "export TARGET_TRIPLE='--target ${{ matrix.rust_target_triple }}'" >> /tmp/rc.bash
          fi
          # if ${{ matrix.os == 'i686-unknown-linux-gnu' }}; then
          #   echo "export X86_64_UNKNOWN_LINUX_GNU_OPENSSL_LIB_DIR='/usr/lib/i386-linux-gnu'" >> /tmp/rc.bash
          #   echo "export X86_64_UNKNOWN_LINUX_GNU_OPENSSL_INCLUDE_DIR='/usr/include/i386-linux-gnu/openssl'" >> /tmp/rc.bash
          # fi
          source /tmp/rc.bash
          rustup default ${{ matrix.rust_channel }}-${{ matrix.rust_host_triple }}
          rustup update
          if ${{ matrix.rust_target_triple == matrix.rust_host_triple }}; then
            rustup component add rustfmt
          else
            rustup target add ${{ matrix.rust_target_triple }}
          fi
          rustup component add clippy
        shell: bash

      - name: Display versions
        run: |
          source /tmp/rc.bash
          rustup show
          echo -e '\n'
          rustc -Vv
          echo -e '\n'
          cargo -Vv
          echo -e '\n'
          cargo clippy -V
          echo -e '\n'
          if ${{ matrix.rust_target_triple == matrix.rust_host_triple }}; then
            rustfmt -V
            echo -e '\n'
          fi
          bash --version
          echo -e '\n'
          which pkg-config || true
          echo -e '\n'
          which openssl || true
        shell: bash

      - name: cargo fmt -- --check
        run: |
          source /tmp/rc.bash
          cargo fmt --all -- --check
        shell: bash
        if: matrix.rust_target_triple == matrix.rust_host_triple

      - name: cargo clippy
        run: |
          source /tmp/rc.bash
          # A hack to avoid IRC
          cargo check --all --all-targets --all-features $TARGET_TRIPLE
          if ${{ matrix.os == 'windows-2019' }}; then
            TO_UNIX_PATHS='xargs cygpath -u'
          else
            TO_UNIX_PATHS=cat
          fi
          cargo metadata --format-version 1 |
            jq -r '.workspace_members[] as $members | .packages[] | select(.id == $members) | .targets[].src_path' |
            $TO_UNIX_PATHS |
            xargs touch
          cargo clippy --all --all-targets --all-features $TARGET_TRIPLE -- -D warnings
        shell: bash

      - name: cargo test
        run: |
          source /tmp/rc.bash
          cargo test --all --all-targets --all-features $TARGET_TRIPLE
        shell: bash

      - name: cargo build
        run: |
          source /tmp/rc.bash
          cargo build --release --all-features $TARGET_TRIPLE
        shell: bash
        if: 'false'

      - name: Upload to GitHub Releases
        run: |
          source /tmp/rc.bash
          if ${{ matrix.rust_target_triple == 'windows-2019' }}; then
            EXE=.exe
          fi
          if ${{ matrix.rust_target_triple == matrix.rust_host_triple }}; then
            RELEASE_TARGET="./target/release/${GITHUB_REPOSITORY#*/}$EXE"
          else
            RELEASE_TARGET="./target/${{ matrix.rust_target_triple }}/release/${GITHUB_REPOSITORY#*/}$EXE"
          fi
          ASSET_STEM="${GITHUB_REPOSITORY#*/}-${GITHUB_REF#refs/tags/}-${{ matrix.rust_target_triple }}"
          go get github.com/tcnksm/ghr
          cargo build --release --all-features $TARGET_TRIPLE
          git archive -o "./$ASSET_STEM.tar" --prefix "$ASSET_STEM/" HEAD
          tar -xf "./$ASSET_STEM.tar"
          mv "$RELEASE_TARGET" "./$ASSET_STEM/"
          if ${{ matrix.os == 'windows-2019' }}; then
            ASSET="./$ASSET_STEM.zip"
            7z a "$ASSET" "./$ASSET_STEM"
            zipinfo "$ASSET"
          else
            ASSET="./$ASSET_STEM.tar.gz"
            tar -czvf "$ASSET" "./$ASSET_STEM"
          fi
          ghr "${GITHUB_REF#refs/tags/}" "$ASSET"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        if: startsWith(github.ref, 'refs/tags/')

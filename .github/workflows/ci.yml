name: CI

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        rust_version:
          - stable
        rust_triple:
          - x86_64-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        include:
          - rust_version: stable
            rust_triple: x86_64-pc-windows-msvc
            os: windows-2019
          - rust_version: stable
            rust_triple: x86_64-pc-windows-gnu
            os: windows-2019
          - rust_version: stable
            rust_triple: x86_64-apple-darwin
            os: macOS-10.14
          - rust_version: stable
            rust_triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04
          - rust_version: stable
            rust_triple: x86_64-unknown-linux-musl
            os: ubuntu-18.04
    name: ${{ matrix.rust_version }}-${{ matrix.rust_triple }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1

      - name: rustup-init
        run: |
          if [ ${{ matrix.rust_triple }} = x86_64-unknown-linux-musl ]; then
            rust_musl_builder="$(docker run -id -v "$(pwd):/home/rust/src" ekidd/rust-musl-builder)"
            echo "alias rustup='docker exec $rust_musl_builder rustup'" >> ~/.bashrc
            echo "alias cargo='docker exec $rust_musl_builder cargo'" >> ~/.bashrc
          else
            curl -sSf --tlsv1.2 --proto '=https' -o ./rustup-init https://sh.rustup.rs
            bash ./rustup-init -y --no-modify-path --default-toolchain none
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc
          fi
          cat ~/.bashrc
          source ~/.bashrc
          rustup update ${{ matrix.rust_version }}-${{ matrix.rust_triple }}
          rustup component add --toolchain ${{ matrix.rust_version }}-${{ matrix.rust_triple }} clippy
          if [ ${{ matrix.rust_triple }} = x86_64-unknown-linux-musl ]; then
            rustup default ${{ matrix.rust_version }}-x86_64-unknown-linux-gnu
          else
            rustup default ${{ matrix.rust_version }}-${{ matrix.rust_triple }}
            rustup component add rustfmt
          fi
        shell: bash

      - name: Display versions
        run: |
          rustup show
          echo -e '\n'
          if [ ${{ matrix.rust_triple }} != x86_64-unknown-linux-musl ]; then
            rustc -Vv
            echo -e '\n'
            cargo -Vv
            echo -e '\n'
            cargo clippy -V
            echo -e '\n'
            rustfmt -V
            echo -e '\n'
          fi
          bash --version
        shell: bash

      - name: cargo fmt -- --check
        run: cargo fmt --all -- --check
        shell: bash
        if: matrix.rust_triple != 'x86_64-unknown-linux-musl'

      - name: cargo clippy
        run: |
          # A hack to avoid IRC
          cargo +${{ matrix.rust_version }} check --all --all-targets --target ${{ matrix.rust_triple }}
          if [ ${{ matrix.os }} = windows-2019 ]; then
            to_unix_path='cygpath -u'
          else
            to_unix_path=echo
          fi
          cargo metadata --format-version 1 |
            jq -r '.workspace_members[] as $members | .packages[] | select(.id == $members) | .targets[].src_path' |
            xargs -n 1 $to_unix_path |
            xargs touch
          cargo +${{ matrix.rust_version }} clippy --all --all-targets --target ${{ matrix.rust_triple }} -- -D warnings
        shell: bash

      - name: cargo test
        run: cargo +${{ matrix.rust_version }} test --all --all-targets --target ${{ matrix.rust_triple }}
        shell: bash

      - name: cargo run
        run: cargo +${{ matrix.rust_version }} run --target ${{ matrix.rust_triple }}
        shell: bash
